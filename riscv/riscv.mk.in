get_insn_list = $(shell grep ^DECLARE_INSN $(1) | sed 's/DECLARE_INSN(\(.*\),.*,.*)/\1/')
get_opcode = $(shell grep ^DECLARE_INSN.*\\\<$(2)\\\> $(1) | sed 's/DECLARE_INSN(.*,\(.*\),.*)/\1/')

riscv_subproject_deps = \
	softfloat \

riscv_install_prog_srcs = \

riscv_hdrs = \
	common.h \
	decode.h \
	devices.h \
	disasm.h \
	dts.h \
	mmu.h \
	processor.h \
	sim.h \
	simif.h \
	trap.h \
	encoding.h \
	cachesim.h \
	memtracer.h \
	tracer.h \
	extension.h \
	rocc.h \
	insn_template.h \
	mulhi.h \
	debug_module.h \
	debug_rom_defines.h \
	remote_bitbang.h \
	jtag_dtm.h \

riscv_precompiled_hdrs = \
	insn_template.h \

riscv_srcs = \
	processor.cc \
	execute.cc \
	dts.cc \
	sim.cc \
	interactive.cc \
	trap.cc \
	cachesim.cc \
	mmu.cc \
	disasm.cc \
	extension.cc \
	extensions.cc \
	rocc.cc \
	regnames.cc \
	devices.cc \
	rom.cc \
	clint.cc \
	debug_module.cc \
	remote_bitbang.cc \
	jtag_dtm.cc \
	$(riscv_gen_srcs) \

riscv_test_srcs =

riscv_gen_hdrs = \
	icache.h \
	insn_list.h \

riscv_insn_list = \
	add \
	addi \
	addiw \
	addw \
	amoadd_d \
	amoadd_w \
	amoand_d \
	amoand_w \
	amomax_d \
	amomaxu_d \
	amomaxu_w \
	amomax_w \
	amomin_d \
	amominu_d \
	amominu_w \
	amomin_w \
	amoor_d \
	amoor_w \
	amoswap_d \
	amoswap_w \
	amoxor_d \
	amoxor_w \
	and \
	andi \
	auipc \
	beq \
	bge \
	bgeu \
	blt \
	bltu \
	bne \
	c_add \
	c_addi4spn \
	c_addi \
	c_addw \
	c_and \
	c_andi \
	c_beqz \
	c_bnez \
	c_ebreak \
	c_fld \
	c_fldsp \
	c_flw \
	c_flwsp \
	c_fsd \
	c_fsdsp \
	c_fsw \
	c_fswsp \
	c_jal \
	c_jalr \
	c_j \
	c_jr \
	c_li \
	c_lui \
	c_lw \
	c_lwsp \
	c_mv \
	c_or \
	c_slli \
	c_srai \
	c_srli \
	c_sub \
	c_subw \
	c_xor \
	csrrc \
	csrrci \
	csrrs \
	csrrsi \
	csrrw \
	csrrwi \
	c_sw \
	c_swsp \
	div \
	divu \
	divuw \
	divw \
	dret \
	ebreak \
	ecall \
	fadd_d \
	fadd_q \
	fadd_s \
	fclass_d \
	fclass_q \
	fclass_s \
	fcvt_d_l \
	fcvt_d_lu \
	fcvt_d_q \
	fcvt_d_s \
	fcvt_d_w \
	fcvt_d_wu \
	fcvt_l_d \
	fcvt_l_q \
	fcvt_l_s \
	fcvt_lu_d \
	fcvt_lu_q \
	fcvt_lu_s \
	fcvt_q_d \
	fcvt_q_l \
	fcvt_q_lu \
	fcvt_q_s \
	fcvt_q_w \
	fcvt_q_wu \
	fcvt_s_d \
	fcvt_s_l \
	fcvt_s_lu \
	fcvt_s_q \
	fcvt_s_w \
	fcvt_s_wu \
	fcvt_w_d \
	fcvt_w_q \
	fcvt_w_s \
	fcvt_wu_d \
	fcvt_wu_q \
	fcvt_wu_s \
	fdiv_d \
	fdiv_q \
	fdiv_s \
	fence \
	fence_i \
	feq_d \
	feq_q \
	feq_s \
	fld \
	fle_d \
	fle_q \
	fle_s \
	flh \
	flq \
	flt_d \
	flt_q \
	flt_s \
	flw \
	fmadd_d \
	fmadd_q \
	fmadd_s \
	fmax_d \
	fmax_q \
	fmax_s \
	fmin_d \
	fmin_q \
	fmin_s \
	fmsub_d \
	fmsub_q \
	fmsub_s \
	fmul_d \
	fmul_q \
	fmul_s \
	fmv_d_x \
	fmv_w_x \
	fmv_x_d \
	fmv_x_w \
	fnmadd_d \
	fnmadd_q \
	fnmadd_s \
	fnmsub_d \
	fnmsub_q \
	fnmsub_s \
	fsd \
	fsgnj_d \
	fsgnj_q \
	fsgnjn_d \
	fsgnjn_q \
	fsgnjn_s \
	fsgnj_s \
	fsgnjx_d \
	fsgnjx_q \
	fsgnjx_s \
	fsh \
	fsq \
	fsqrt_d \
	fsqrt_q \
	fsqrt_s \
	fsub_d \
	fsub_q \
	fsub_s \
	fsw \
	jal \
	jalr \
	lb \
	lbu \
	ld \
	lh \
	lhu \
	lr_d \
	lr_w \
	lui \
	lw \
	lwu \
	mret \
	mul \
	mulh \
	mulhsu \
	mulhu \
	mulw \
	or \
	ori \
	rem \
	remu \
	remuw \
	remw \
	sb \
	sc_d \
	sc_w \
	sd \
	sfence_vma \
	sh \
	sll \
	slli \
	slliw \
	sllw \
	slt \
	slti \
	sltiu \
	sltu \
	sra \
	srai \
	sraiw \
	sraw \
	sret \
	srl \
	srli \
	srliw \
	srlw \
	sub \
	subw \
	sw \
	vsetvli \
	vfmacc_vf \
	vlb_v \
	vlh_v \
	vlw_v \
	vlbu_v \
	vlhu_v \
	vlwu_v \
	vlsb_v \
	vlsh_v \
	vlsw_v \
	vlxb_v \
	vlxh_v \
	vlxw_v \
	vlsbu_v \
	vlshu_v \
	vlswu_v \
	vlxbu_v \
	vlxhu_v \
	vlxwu_v \
	vsb_v \
	vsh_v \
	vsw_v \
	vssb_v \
	vssh_v \
	vssw_v \
	vsxb_v \
	vsxh_v \
	vsxw_v \
	vadd_vv \
	vredand_vv \
	vsub_vv \
	vredor_vv \
	vrsub_vx \
	vredxor_vv \
	vminu_vv \
	vredminu_vv \
	vmin_vv \
	vredmin_vv \
	vmaxu_vv \
	vredmaxu_vv \
	vmax_vv \
	vredmax_vv \
	vand_vv \
	vor_vv \
	vxor_vv \
	vrgather_vv \
	vext_x_v \
	vmv_s_x \
	vslideup_vx \
	vslide1up_vx \
	vslidedown_vx \
	vslide1down_vx \
	vadc_vv \
	vsbc_vv \
	vmpopc_m \
	vmfirst_m \
	vmerge_vv \
	vcompress_vm \
	vseq_vv \
	vmandnot_mm \
	vsne_vv \
	vmand_mm \
	vsltu_vv \
	vmor_mm \
	vslt_vv \
	vmxor_mm \
	vsleu_vv \
	vmornot_mm \
	vsle_vv \
	vmnand_mm \
	vsgtu_vx \
	vmnor_mm \
	vsgt_vx \
	vmxnor_mm \
	vsaddu_vv \
	vdivu_vv \
	vsadd_vv \
	vdiv_vv \
	vssubu_vv \
	vremu_vv \
	vssub_vv \
	vrem_vv \
	vaadd_vv \
	vmulhu_vv \
	vsll_vv \
	vmul_vv \
	vasub_vv \
	vmulhsu_vv \
	vsmul_vv \
	vmulh_vv \
	vsrl_vv \
	vsra_vv \
	vmadd_vv \
	vssrl_vv \
	vssra_vv \
	vmsub_vv \
	vnsrl_vv \
	vnsra_vv \
	vmacc_vv \
	vnclipu_vv \
	vnclip_vv \
	vmsac_vv \
	vwaddu_vv \
	vwadd_vv \
	vwsubu_vv \
	vwsub_vv \
	vwaddu_wv \
	vwadd_wv \
	vwsubu_wv \
	vwsub_wv \
	vdotu_vv \
	vwmulu_vv \
	vdot_vv \
	vwmulsu_vv \
	vwmul_vv \
	vwsmaccu_vv \
	vwmaccu_vv \
	vwsmacc_vv \
	vwmacc_vv \
	vwsmsacu_vv \
	vwmsacu_vx \
	vwsmsac_vv \
	vwmsac_vx \
	vfadd_vv \
	vfredsum_vs \
	vfsub_vv \
	vfredosum_vs \
	vfmin_vv \
	vfredmin_vs \
	vfmax_vv \
	vfredmax_vs \
	vfsgnj_vf \
	vfsgnj_vv \
	vfsgnn_vf \
	vfsgnn_vv \
	vfsgnx_vf \
	vfsgnx_vv \
	vfmv_f_s \
	vfmv_s_f \
	vfmerge_vf \
	vfeq_vv \
	vfle_vv \
	vford_vv \
	vflt_vv \
	vfne_vv \
	vfgt_vf \
	vfge_vf \
	vfdiv_vv \
	vfrdiv_vf \
	vfmul_vv \
	vfmadd_vv \
	vfnmadd_vv \
	vfmsub_vv \
	vfnmsub_vv \
	vfmacc_vv \
	vfnmacc_vv \
	vfmsac_vv \
	vfnmsac_vv \
	vfwadd_vv \
	vfwredsum_vs \
	vfwsub_vv \
	vfwredosum_vs \
	vfwadd_wv \
	vfwsub_wv \
	vfwmul_vv \
	vfdot_vv \
	vfwmacc_vv \
	vfwnmacc_vv \
	vfwmsac_vv \
	vfwnmsac_vv \
	wfi \
	xor \
	xori \

riscv_gen_srcs = \
	$(addsuffix .cc,$(riscv_insn_list))

icache_entries := `grep "ICACHE_ENTRIES =" $(src_dir)/riscv/mmu.h | sed 's/.* = \(.*\);/\1/'`

icache.h: mmu.h
	$(src_dir)/riscv/gen_icache $(icache_entries) > $@.tmp
	mv $@.tmp $@

insn_list.h: $(src_dir)/riscv/riscv.mk.in
	for insn in $(foreach insn,$(riscv_insn_list),$(subst .,_,$(insn))) ; do \
		printf 'DEFINE_INSN(%s)\n' "$${insn}" ; \
	done > $@.tmp
	mv $@.tmp $@

$(riscv_gen_srcs): %.cc: insns/%.h insn_template.cc
	sed 's/NAME/$(subst .cc,,$@)/' $(src_dir)/riscv/insn_template.cc | sed 's/OPCODE/$(call get_opcode,$(src_dir)/riscv/encoding.h,$(subst .cc,,$@))/' > $@

riscv_junk = \
	$(riscv_gen_srcs) \
